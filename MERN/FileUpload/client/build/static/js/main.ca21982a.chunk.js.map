{"version":3,"sources":["data/api.js","screens/FileUploadScreen.js","App.js","reportWebVitals.js","index.js"],"names":["apiUrl","singleFileUpload","data","options","a","axios","post","getSingleFiles","get","multipleFilesUpload","getMultipleFiles","FileUploadScreen","props","useState","singleFile","setSingleFile","multipleFiles","setMultipleFiles","title","setTitle","singleProgress","setSingleProgress","multipleProgress","setMultipleProgress","singleFileOptions","onUploadProgress","progressEvent","loaded","total","percentage","Math","floor","mulitpleFileOptions","uploadSingleFile","formData","FormData","append","getsingle","UploadMultipleFiles","i","length","getMultiple","className","type","onChange","e","target","files","SingleFileChange","onClick","value","text","styles","buildStyles","rotation","strokeLinecap","textSize","pathTransitionDuration","pathColor","textColor","trailColor","backgroundColor","placeholder","MultipleFileChange","multiple","App","singleFiles","setSingleFiles","getSingleFileslist","fileslist","console","log","getMultipleFilesList","useEffect","map","file","index","src","filePath","height","alt","_id","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca21982a.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n// const apiUrl = 'http://localhost:8080/api/';\r\nconst apiUrl = 'https://uploadmern.herokuapp.com/api/';\r\n\r\nexport const singleFileUpload = async (data, options) => {\r\n    try {\r\n        await axios.post(apiUrl + 'singleFile', data, options);\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\nexport const getSingleFiles = async () => {\r\n    try {\r\n            const {data} = await axios.get(apiUrl + 'getSingleFiles');\r\n            return data;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const multipleFilesUpload = async (data, options) => {\r\n    try {\r\n        await axios.post(apiUrl + 'multipleFiles', data, options);\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\nexport const getMultipleFiles = async () => {\r\n    try{\r\n        const {data} = await axios.get(apiUrl + 'getMultipleFiles');\r\n        return data;\r\n    }catch(error){\r\n        throw error;\r\n    }\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport {singleFileUpload, multipleFilesUpload} from '../data/api';\r\nimport {CircularProgressbar, buildStyles} from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\n\r\n\r\nconst FileUploadScreen = (props) => {\r\n    const [singleFile, setSingleFile] = useState('');\r\n    const [multipleFiles, setMultipleFiles] = useState('');\r\n    const [title, setTitle] =  useState('');\r\n    const [singleProgress, setSingleProgress] = useState(0);\r\n    const [multipleProgress, setMultipleProgress] = useState(0);\r\n\r\n    const SingleFileChange = (e) => {\r\n        setSingleFile(e.target.files[0]);\r\n        setSingleProgress(0);\r\n    }\r\n    const MultipleFileChange = (e) => {\r\n        setMultipleFiles(e.target.files);\r\n        setMultipleProgress(0);\r\n    }\r\n    const singleFileOptions = {\r\n        onUploadProgress: (progressEvent) => {\r\n            const {loaded, total} = progressEvent;\r\n            const percentage = Math.floor(((loaded / 1000) * 100) / (total / 1000));\r\n            setSingleProgress(percentage);\r\n        }\r\n    }\r\n    const mulitpleFileOptions = {\r\n        onUploadProgress: (progressEvent) => {\r\n            const {loaded, total} = progressEvent;\r\n            const percentage = Math.floor(((loaded / 1000) * 100) / (total / 1000));\r\n            setMultipleProgress(percentage);\r\n        }\r\n    }\r\n    const uploadSingleFile = async () => {\r\n        const formData = new FormData();\r\n        formData.append('file', singleFile);\r\n        await singleFileUpload(formData, singleFileOptions);\r\n        props.getsingle();\r\n    }\r\n    const UploadMultipleFiles = async () => {\r\n        const formData = new FormData();\r\n        formData.append('title', title);\r\n        for (let i = 0; i < multipleFiles.length; i++) {\r\n            formData.append('files', multipleFiles[i]);                      \r\n        }\r\n        await multipleFilesUpload(formData, mulitpleFileOptions);\r\n        props.getMultiple();\r\n    }\r\n    return (\r\n        <div className=\"row mt-3\">\r\n            <div className=\"col-6\">\r\n                <div className=\"form-group\">\r\n                    <label>Select Single File</label>\r\n                    <input type=\"file\" className=\"form-control\" onChange={(e) => SingleFileChange(e)} />\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-10\">\r\n                        <button type=\"button\" className=\"btn btn-danger\" onClick={() => uploadSingleFile()} >Upload</button>\r\n                    </div>\r\n                    <div className=\"col-2\">\r\n                        <CircularProgressbar\r\n                            value={singleProgress}\r\n                            text={`${singleProgress}%`}\r\n                            styles={buildStyles({\r\n                                rotation: 0.25,\r\n                                strokeLinecap: 'butt',\r\n                                textSize: '16px',\r\n                                pathTransitionDuration: 0.5,\r\n                                pathColor: `rgba(255, 136, 136, ${singleProgress / 100})`,\r\n                                textColor: '#f88',\r\n                                trailColor: '#d6d6d6',\r\n                                backgroundColor: '#3e98c7',\r\n                            })}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-6\">\r\n                   <div className=\"row\">\r\n                       <div className=\"col-6\">\r\n                            <label >Title</label>\r\n                            <input type=\"text\" onChange={(e) => setTitle(e.target.value) } placeholder=\"enter title for your gallery\" className=\"form-control\"/>\r\n                       </div>\r\n                       <div className=\"col-6\">\r\n                        <div className=\"form-group\">\r\n                            <label>Select Multiple Files</label>\r\n                            <input type=\"file\" onChange={(e) => MultipleFileChange(e)} className=\"form-control\" multiple />\r\n                        </div>\r\n                       </div>\r\n                   </div>                   \r\n                    <div className=\"row\">\r\n                        <div className=\"col-10\">\r\n                            <button type=\"button\" onClick={() => UploadMultipleFiles()}  className=\"btn btn-danger\">Upload</button>\r\n                        </div>\r\n                        <div className=\"col-2\">\r\n                        <CircularProgressbar\r\n                            value={multipleProgress}\r\n                            text={`${multipleProgress}%`}\r\n                            styles={buildStyles({\r\n                                rotation: 0.25,\r\n                                strokeLinecap: 'butt',\r\n                                textSize: '16px',\r\n                                pathTransitionDuration: 0.5,\r\n                                pathColor: `rgba(255, 136, 136, ${multipleProgress / 100})`,\r\n                                textColor: '#f88',\r\n                                trailColor: '#d6d6d6',\r\n                                backgroundColor: '#3e98c7',\r\n                            })}\r\n                        />\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FileUploadScreen;","import React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\nimport FileUploadScreen from './screens/FileUploadScreen';\r\nimport {getSingleFiles, getMultipleFiles} from './data/api';\r\n\r\nfunction App() {\r\n  const [singleFiles, setSingleFiles] = useState([]);\r\n  const [multipleFiles, setMultipleFiles] = useState([]);\r\n\r\n  const getSingleFileslist = async () => {\r\n    try {\r\n        const fileslist = await getSingleFiles();\r\n        setSingleFiles(fileslist);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  const getMultipleFilesList = async () => {\r\n    try {\r\n        const fileslist = await getMultipleFiles();\r\n        setMultipleFiles(fileslist);\r\n        console.log(multipleFiles);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    getSingleFileslist();\r\n    getMultipleFilesList();\r\n  }, []);\r\n  return (\r\n    <>\r\n        <div className=\"container\">\r\n          <h3 className=\"text-danger font-weight-bolder border-bottom text-center\">Single & Multiple File Upload Using MERN Stack </h3>\r\n          <FileUploadScreen getsingle={() => getSingleFileslist()} getMultiple={() => getMultipleFilesList()}/>\r\n       </div>\r\n       <div className=\"container-fluid mt-5\">\r\n         <div className=\"row\">\r\n           <div className=\"col-6\">\r\n             <h4 className=\"text-success font-weight-bold\">Single Files List</h4>\r\n             <div className=\"row\">\r\n                {singleFiles.map((file, index) =>\r\n                  <div className=\"col-6\" key={file._id}>\r\n                    <div className=\"card mb-2 border-0 p-0\">\r\n                      <img src={`http://localhost:8080/${file.filePath}`} height=\"200\" className=\"card-img-top img-responsive\" alt=\"img\"/>\r\n                      </div>\r\n                  </div>\r\n                )}\r\n             </div>\r\n           </div>\r\n           <div className=\"col-6\">\r\n             <h4 className=\"text-success font-weight-bold\">Multiple Files List</h4>\r\n             {multipleFiles.map((element, index) =>\r\n                <div key={element._id}>\r\n                    <h6 className=\"text-danger font-weight-bold\">{element.title}</h6>\r\n                    <div className=\"row\">\r\n                      {element.files.map((file, index) =>\r\n                        <div className=\"col-6\" key={file.filePath}>\r\n                            <div className=\"card mb-2 border-0 p-0\">\r\n                              <img src={`http://localhost:8080/${file.filePath}`} height=\"200\" className=\"card-img-top img-responsive\" alt=\"img\"/>\r\n                              </div>\r\n                          </div>\r\n                       )}\r\n                      </div>\r\n                </div>\r\n              )}\r\n           </div>\r\n         </div>\r\n       </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}